location ~ /.well-known {
            allow all;
    }

=============================
                if form.is_valid():
                    if form.cleaned_data['docfile'] != None:
                        print(form.cleaned_data['docfile'].size)
                        if form.cleaned_data['docfile'].size <= 2097152:
                            animal = form.save(commit=False)
                            animal.user = request.user
                            # animal.save()
                            messages.success(request, _('Your Account will be reviewed and will back to you soon'))
                            mail_subject = 'Teacher registration'
                            mail_body = render_to_string('teachers/teacherRegistrationMail.html', {
                                'user': request.user.email,

                            })
                            to_email = 'first_man@windowslive.com'
                            send_mail = django.core.mail.EmailMessage(mail_subject, mail_body, to=[to_email])
                            # send_mail.send()
                            return render(request, 'teachers/waitForReview.html')
                        else:
                            messages.error(request, _('file bigger than 2 MB'))
                    else:
                        messages.error(request, _('cv can not be empty!'))
                else:
                    messages.error(request, _('Your cv file not pdf'))
==========================
 {%trans ''%}
 {% load i18n %}

 {%for i in urls %}

                        <div class="form-row  ">
                        <div class="form-group ">
                          {%if i.class_url_is_deliverd %}
                          lesson url- <strong>(lesson done) <strong> :<label  class="fst-italic form-control" >  {{i.class_url}} </label>
                          {%else%}
                          lesson url :<a class="fst-italic form-control" target="_blank" href="{{i.class_url}}">  {{i.class_url}} </a>
                          {%endif%}

                        </div>
                        </div>

                  {%endfor%}
                   <h3>Course Material URl</h3>
                    <div class="form-row  ">
                        <div class="form-group ">
                          {%if order_detail.class_material_url%}

                         Course Material URl : <a class="fst-italic form-control" target="_blank" href="{{order_detail.class_material_url}}">  {{order_detail.class_material_url}} </a>
                          {%else%}
                         Course Material URl : <a class="fst-italic form-control"  > </a>

                        {%endif%}
                        </div>
                        </div>


  ================================
  <div id="smart-button-container">
      <div style="text-align: center;">
        <div id="paypal-button-container"></div>
      </div>
    </div>
  <script src="https://www.paypal.com/sdk/js?client-id=AaaN7NFP0GjcsLMkjUBzfv6hGYf9OWbVP8knCAcRnuK0HJ1dPnNzz8DbwJaFUzir6iNL_3P1IzeKInWt&enable-funding=venmo&currency=USD" data-sdk-integration-source="button-factory"></script>
  <script>
    function initPayPalButton() {
      paypal.Buttons({
        style: {
          shape: 'rect',
          color: 'gold',
          layout: 'vertical',
          label: 'paypal',

        },

        createOrder: function(data, actions) {
          return actions.order.create({
            purchase_units: [{"amount":{"currency_code":"USD","value":1}}]
          });
        },

        onApprove: function(data, actions) {
          return actions.order.capture().then(function(orderData) {

            // Full available details
            console.log('Capture result', orderData, JSON.stringify(orderData, null, 2));

            // Show a success message within this page, e.g.
            const element = document.getElementById('paypal-button-container');
            element.innerHTML = '';
            element.innerHTML = '<h3>Thank you for your payment!</h3>';

            // Or go to another URL:  actions.redirect('thank_you.html');

          });
        },

        onError: function(err) {
          console.log(err);
        }
      }).render('#paypal-button-container');
    }
    initPayPalButton();
  </script>
  =======================================
  <!DOCTYPE html>
    <html lang="en">
      <head>
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <title>PayPal Standard Payments Integration | Client Demo</title>
      </head>

      <body>
        <div id="paypal-button-container"></div>
        <!-- Sample PayPal credentials (client-id) are included -->
        <script src="https://www.paypal.com/sdk/js?client-id=test&currency=USD&intent=capture&enable-funding=venmo" data-sdk-integration-source="integrationbuilder"></script>
        <script>
          const paypalButtonsComponent = paypal.Buttons({
              // optional styling for buttons
              // https://developer.paypal.com/docs/checkout/standard/customize/buttons-style-guide/
              style: {
                color: "gold",
                shape: "rect",
                layout: "vertical"
              },

              // set up the transaction
              createOrder: (data, actions) => {
                  // pass in any options from the v2 orders create call:
                  // https://developer.paypal.com/api/orders/v2/#orders-create-request-body
                  const createOrderPayload = {
                      purchase_units: [
                          {
                              amount: {
                                  value: "88.44"
                              }
                          }
                      ]
                  };

                  return actions.order.create(createOrderPayload);
              },

              // finalize the transaction
              onApprove: (data, actions) => {
                  const captureOrderHandler = (details) => {
                      const payerName = details.payer.name.given_name;
                      console.log('Transaction completed');
                  };

                  return actions.order.capture().then(captureOrderHandler);
              },

              // handle unrecoverable errors
              onError: (err) => {
                  console.error('An error prevented the buyer from checking out with PayPal');
              }
          });

          paypalButtonsComponent
              .render("#paypal-button-container")
              .catch((err) => {
                  console.error('PayPal Buttons failed to render');
              });
        </script>
      </body>
    </html>
    ================================
      <script src="https://www.paypal.com/sdk/js?client-id=Af5MlogypUf7ENCARTq3_rr1sl4Wx6xRCWP_mA9Wp5BnCg86zZtyICZv7Tkw5Yb0yIfGkFofKQmS8x2t&currency=USD"></script>
class Curriculum(models.Model):
    Tybe = models.CharField(max_length=30)
    def __str__(self):
        return self.Tybe
            # type1 = models.ManyToManyField(Curriculum)
